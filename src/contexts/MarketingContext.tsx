
import React, { createContext, useContext, useState, useEffect } from 'react';

export type Campaign = {
  id: string;
  name: string;
  businessDescription: string;
  objective: string;
  exampleContent?: string;
  preferredDesign?: string;
  createdAt: string;
  generatedIdeas?: IdeaType[];
  selectedThemes?: string[];
  selectedTags?: string[];
};

export type IdeaType = {
  id: string;
  title: string;
  description: string;
  videoUrl?: string;
  imageUrl?: string;
  platforms: {
    linkedin?: string;
    twitter?: string;
    instagram?: string;
  };
  tags: string[];
  themes: string[];
  selected?: boolean;
};

type MarketingContextType = {
  campaigns: Campaign[];
  currentCampaign: Campaign | null;
  generatedIdeas: IdeaType[];
  aiSummary: string;
  suggestedThemes: string[];
  suggestedTags: string[];
  selectedThemes: string[];
  selectedTags: string[];
  selectedIdeas: IdeaType[];
  createNewCampaign: (campaign: Omit<Campaign, 'id' | 'createdAt'>) => void;
  setCurrentCampaign: (campaignId: string) => void;
  updateCurrentCampaign: (updates: Partial<Campaign>) => void;
  generateIdeas: () => Promise<void>;
  selectTheme: (theme: string) => void;
  unselectTheme: (theme: string) => void;
  selectTag: (tag: string) => void;
  unselectTag: (tag: string) => void;
  generateVideos: () => Promise<void>;
  toggleIdeaSelection: (ideaId: string) => void;
  saveCampaign: () => void;
  exportToText: () => void;
  loadCampaign: (campaignId: string) => void;
};

const MarketingContext = createContext<MarketingContextType | undefined>(undefined);

// Mock functions for AI generation (to be replaced with actual API calls)
const mockGenerateAISummary = (description: string, objective: string): string => {
  return `AI-generated summary of campaign targeting ${objective} based on the provided business description. This would be generated by Gemini in a real implementation.`;
};

const mockGenerateThemesAndTags = (description: string, objective: string): { themes: string[], tags: string[] } => {
  return {
    themes: ['Professional', 'Modern', 'Innovative', 'Trustworthy', 'Friendly'],
    tags: ['Business', 'Tech', 'Growth', 'Solutions', 'Digital', 'Success']
  };
};

const mockGenerateIdeas = (description: string, objective: string, themes: string[], tags: string[]): IdeaType[] => {
  return Array(6).fill(null).map((_, idx) => ({
    id: `idea-${Date.now()}-${idx}`,
    title: `Marketing Idea ${idx + 1}`,
    description: `This is a generated marketing idea that aligns with your selected themes and tags. It would showcase your business in a way that meets your ${objective} objective.`,
    imageUrl: "https://via.placeholder.com/300x200",
    videoUrl: undefined, // Would be generated later
    platforms: {
      linkedin: "Sample LinkedIn post text would go here...",
      twitter: "Sample Twitter post text would go here... #hashtags",
      instagram: "Sample Instagram caption would go here... #hashtags"
    },
    tags: tags.slice(0, 3),
    themes: themes.slice(0, 2),
    selected: false
  }));
};

const mockGenerateVideos = (ideas: IdeaType[]): IdeaType[] => {
  return ideas.map(idea => ({
    ...idea,
    videoUrl: "https://placeholder-videos.s3.amazonaws.com/sample.mp4" // Placeholder
  }));
};

export const MarketingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [campaigns, setCampaigns] = useState<Campaign[]>([]);
  const [currentCampaign, setCurrentCampaign] = useState<Campaign | null>(null);
  const [generatedIdeas, setGeneratedIdeas] = useState<IdeaType[]>([]);
  const [aiSummary, setAiSummary] = useState<string>('');
  const [suggestedThemes, setSuggestedThemes] = useState<string[]>([]);
  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);
  const [selectedThemes, setSelectedThemes] = useState<string[]>([]);
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [selectedIdeas, setSelectedIdeas] = useState<IdeaType[]>([]);

  // Load campaigns from localStorage on initial render
  useEffect(() => {
    const savedCampaigns = localStorage.getItem('marketingCampaigns');
    if (savedCampaigns) {
      setCampaigns(JSON.parse(savedCampaigns));
    }
    
    const currentCampaignId = localStorage.getItem('currentCampaignId');
    if (currentCampaignId) {
      const savedCampaigns = JSON.parse(localStorage.getItem('marketingCampaigns') || '[]');
      const campaign = savedCampaigns.find((c: Campaign) => c.id === currentCampaignId);
      if (campaign) {
        setCurrentCampaign(campaign);
      }
    }
  }, []);

  // Save campaigns to localStorage whenever they change
  useEffect(() => {
    if (campaigns.length > 0) {
      localStorage.setItem('marketingCampaigns', JSON.stringify(campaigns));
    }
  }, [campaigns]);

  const createNewCampaign = (campaignData: Omit<Campaign, 'id' | 'createdAt'>) => {
    const newCampaign: Campaign = {
      ...campaignData,
      id: `campaign-${Date.now()}`,
      createdAt: new Date().toISOString(),
      generatedIdeas: [],
      selectedThemes: [],
      selectedTags: []
    };
    
    setCampaigns([...campaigns, newCampaign]);
    setCurrentCampaignState(newCampaign);
  };

  const setCurrentCampaignState = (campaign: Campaign | null) => {
    setCurrentCampaign(campaign);
    setGeneratedIdeas(campaign?.generatedIdeas || []);
    setSelectedThemes(campaign?.selectedThemes || []);
    setSelectedTags(campaign?.selectedTags || []);
    
    if (campaign) {
      localStorage.setItem('currentCampaignId', campaign.id);
    } else {
      localStorage.removeItem('currentCampaignId');
    }
    
    // If campaign exists and has a business description, generate AI summaries
    if (campaign && campaign.businessDescription) {
      setAiSummary(mockGenerateAISummary(campaign.businessDescription, campaign.objective));
      const { themes, tags } = mockGenerateThemesAndTags(campaign.businessDescription, campaign.objective);
      setSuggestedThemes(themes);
      setSuggestedTags(tags);
    }
  };

  const updateCurrentCampaign = (updates: Partial<Campaign>) => {
    if (!currentCampaign) return;
    
    const updatedCampaign = {
      ...currentCampaign,
      ...updates
    };
    
    setCurrentCampaignState(updatedCampaign);
    setCampaigns(campaigns.map(c => c.id === updatedCampaign.id ? updatedCampaign : c));
  };

  const generateIdeas = async () => {
    if (!currentCampaign) return;
    
    // In a real-world scenario, this would be an API call to Gemini
    const ideas = mockGenerateIdeas(
      currentCampaign.businessDescription,
      currentCampaign.objective,
      selectedThemes,
      selectedTags
    );
    
    setGeneratedIdeas(ideas);
    updateCurrentCampaign({ generatedIdeas: ideas });
  };

  const selectTheme = (theme: string) => {
    if (!selectedThemes.includes(theme)) {
      const newSelectedThemes = [...selectedThemes, theme];
      setSelectedThemes(newSelectedThemes);
      updateCurrentCampaign({ selectedThemes: newSelectedThemes });
    }
  };

  const unselectTheme = (theme: string) => {
    const newSelectedThemes = selectedThemes.filter(t => t !== theme);
    setSelectedThemes(newSelectedThemes);
    updateCurrentCampaign({ selectedThemes: newSelectedThemes });
  };

  const selectTag = (tag: string) => {
    if (!selectedTags.includes(tag)) {
      const newSelectedTags = [...selectedTags, tag];
      setSelectedTags(newSelectedTags);
      updateCurrentCampaign({ selectedTags: newSelectedTags });
    }
  };

  const unselectTag = (tag: string) => {
    const newSelectedTags = selectedTags.filter(t => t !== tag);
    setSelectedTags(newSelectedTags);
    updateCurrentCampaign({ selectedTags: newSelectedTags });
  };

  const toggleIdeaSelection = (ideaId: string) => {
    const updatedIdeas = generatedIdeas.map(idea => {
      if (idea.id === ideaId) {
        return { ...idea, selected: !idea.selected };
      }
      return idea;
    });
    
    setGeneratedIdeas(updatedIdeas);
    setSelectedIdeas(updatedIdeas.filter(idea => idea.selected));
    updateCurrentCampaign({ generatedIdeas: updatedIdeas });
  };

  const generateVideos = async () => {
    // In a real implementation, this would call Gemini's Veo3 API
    const ideasWithVideos = mockGenerateVideos(selectedIdeas.length > 0 ? selectedIdeas : generatedIdeas.slice(0, 1));
    const updatedIdeas = generatedIdeas.map(idea => {
      const updatedIdea = ideasWithVideos.find(i => i.id === idea.id);
      return updatedIdea || idea;
    });
    setGeneratedIdeas(updatedIdeas);
    updateCurrentCampaign({ generatedIdeas: updatedIdeas });
  };

  const saveCampaign = () => {
    if (!currentCampaign) return;
    setCampaigns(campaigns.map(c => c.id === currentCampaign.id ? currentCampaign : c));
  };

  const exportToText = () => {
    if (!currentCampaign) return;
    
    let text = `# Marketing Campaign: ${currentCampaign.name}\n\n`;
    text += `Created: ${new Date(currentCampaign.createdAt).toLocaleString()}\n`;
    text += `Objective: ${currentCampaign.objective}\n\n`;
    text += `Business Description:\n${currentCampaign.businessDescription}\n\n`;
    
    if (currentCampaign.generatedIdeas && currentCampaign.generatedIdeas.length > 0) {
      text += `## Generated Marketing Ideas\n\n`;
      currentCampaign.generatedIdeas.forEach((idea, index) => {
        text += `### Idea ${index + 1}: ${idea.title}\n`;
        text += `${idea.description}\n\n`;
        
        if (idea.platforms) {
          text += `#### Social Media Content\n`;
          if (idea.platforms.linkedin) {
            text += `LinkedIn: ${idea.platforms.linkedin}\n`;
          }
          if (idea.platforms.twitter) {
            text += `Twitter: ${idea.platforms.twitter}\n`;
          }
          if (idea.platforms.instagram) {
            text += `Instagram: ${idea.platforms.instagram}\n`;
          }
          text += `\n`;
        }
        
        text += `Tags: ${idea.tags.join(', ')}\n`;
        text += `Themes: ${idea.themes.join(', ')}\n\n`;
      });
    }
    
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.download = `${currentCampaign.name.replace(/\s+/g, '-').toLowerCase()}-marketing-campaign.txt`;
    link.href = url;
    link.click();
  };

  const loadCampaign = (campaignId: string) => {
    const campaign = campaigns.find(c => c.id === campaignId);
    if (campaign) {
      setCurrentCampaignState(campaign);
    }
  };

  const value = {
    campaigns,
    currentCampaign,
    generatedIdeas,
    aiSummary,
    suggestedThemes,
    suggestedTags,
    selectedThemes,
    selectedTags,
    selectedIdeas,
    createNewCampaign,
    setCurrentCampaign: loadCampaign,
    updateCurrentCampaign,
    generateIdeas,
    selectTheme,
    unselectTheme,
    selectTag,
    unselectTag,
    generateVideos,
    toggleIdeaSelection,
    saveCampaign,
    exportToText,
    loadCampaign
  };

  return (
    <MarketingContext.Provider value={value}>
      {children}
    </MarketingContext.Provider>
  );
};

export const useMarketingContext = () => {
  const context = useContext(MarketingContext);
  if (context === undefined) {
    throw new Error('useMarketingContext must be used within a MarketingProvider');
  }
  return context;
};
